# Makefile for UNIX 

# the compiler: gcc for C program, define as g++ for C++
CC = gcc 

# the static library archiver 
AR = ar rcs 

# compiler flags: 
# -g enable debugging 
# -Wall turn on all warnings
# -D__USE_FIXED_PROTOTYPES__ force the compiler to use the correct headers
# -ansi donâ€™t use GNU extensions, stick to ANSI 
# -std=c99 use newer version
CFLAGS=-g -Wall -D__USE_FIXED_PROTOTYPES__ -std=c99

# libraries 
# custom
ZLIB_LIB_DIR=../zlib-1.2.8/outputs/debug/lib
ZLIB_STATIC_LIB_PATH=$(ZLIB_LIB_DIR)/libzlib.a

# include directories
INCLUDE_DIRS= ./include ../zlib-1.2.8/include
CFLAGS+= $(foreach d, $(INCLUDE_DIRS), -I$d)

# the build target executable:
TARGET = libpng
LIBRARY = liblibpng.a
SHARED_LIBRARY = liblibpng.so

# on macOS build .dylib shared library
UNAME_S := $(shell uname -s)
ifeq ($(UNAME_S),Darwin)
	DYNAMIC_LIBRARY= liblibpng.dylib
else 
	DYNAMIC_LIBRARY=
endif

# source files
SOURCE_FILES = png.o pngerror.o pngget.o pngmem.o pngpread.o pngread.o pngrio.o pngrtran.o pngrutil.o pngset.o pngtest.o pngtrans.o pngwio.o pngwrite.o pngwtran.o pngwutil.o

# outputs directories
OUTPUTS_DIR = outputs/debug
OUTPUTS_LIB_DIR = $(OUTPUTS_DIR)/lib
OUTPUTS_BIN_DIR = $(OUTPUTS_DIR)/bin

all: directories libraries $(TARGET)

# make outputs directories
directories: 
	@mkdir -p $(OUTPUTS_DIR)
	@mkdir -p $(OUTPUTS_LIB_DIR)
	@mkdir -p $(OUTPUTS_BIN_DIR)

libraries: $(LIBRARY) $(SHARED_LIBRARY) $(DYNAMIC_LIBRARY)

$(TARGET): $(LIBRARY)
	$(CC) $(CFLAGS) -o $(OUTPUTS_BIN_DIR)/$(TARGET) src/main.c $(OUTPUTS_LIB_DIR)/$(LIBRARY) $(ZLIB_STATIC_LIB_PATH)

$(SHARED_LIBRARY): $(SOURCE_FILES)
	$(CC) $(CFLAGS) -L$(ZLIB_LIB_DIR) -shared -o $(OUTPUTS_LIB_DIR)/$(SHARED_LIBRARY) $(OUTPUTS_DIR)/*.o -lzlib

$(DYNAMIC_LIBRARY): $(SOURCE_FILES)
	$(CC) $(CFLAGS) -L$(ZLIB_LIB_DIR) -dynamiclib -o $(OUTPUTS_LIB_DIR)/$(DYNAMIC_LIBRARY) $(OUTPUTS_DIR)/*.o -lzlib

$(LIBRARY): $(SOURCE_FILES)
	$(AR) $(OUTPUTS_LIB_DIR)/$(LIBRARY) $(OUTPUTS_DIR)/*.o

png.o: src/png.c include/png.h
	$(CC) $(CFLAGS) -c src/png.c -o $(OUTPUTS_DIR)/png.o

pngerror.o: src/pngerror.c
	$(CC) $(CFLAGS) -c src/pngerror.c -o $(OUTPUTS_DIR)/pngerror.o

pngget.o: src/pngget.c
	$(CC) $(CFLAGS) -c src/pngget.c -o $(OUTPUTS_DIR)/pngget.o

pngmem.o: src/pngmem.c
	$(CC) $(CFLAGS) -c src/pngmem.c -o $(OUTPUTS_DIR)/pngmem.o

pngpread.o: src/pngpread.c
	$(CC) $(CFLAGS) -c src/pngpread.c -o $(OUTPUTS_DIR)/pngpread.o

pngread.o: src/pngread.c
	$(CC) $(CFLAGS) -c src/pngread.c -o $(OUTPUTS_DIR)/pngread.o

pngrio.o: src/pngrio.c
	$(CC) $(CFLAGS) -c src/pngrio.c -o $(OUTPUTS_DIR)/pngrio.o

pngrtran.o: src/pngrtran.c
	$(CC) $(CFLAGS) -c src/pngrtran.c -o $(OUTPUTS_DIR)/pngrtran.o

pngrutil.o: src/pngrutil.c
	$(CC) $(CFLAGS) -c src/pngrutil.c -o $(OUTPUTS_DIR)/pngrutil.o

pngset.o: src/pngset.c
	$(CC) $(CFLAGS) -c src/pngset.c -o $(OUTPUTS_DIR)/pngset.o

pngtest.o: src/pngtest.c
	$(CC) $(CFLAGS) -c src/pngtest.c -o $(OUTPUTS_DIR)/pngtest.o

pngtrans.o: src/pngtrans.c
	$(CC) $(CFLAGS) -c src/pngtrans.c -o $(OUTPUTS_DIR)/pngtrans.o

pngwio.o: src/pngwio.c
	$(CC) $(CFLAGS) -c src/pngwio.c -o $(OUTPUTS_DIR)/pngwio.o

pngwrite.o: src/pngwrite.c
	$(CC) $(CFLAGS) -c src/pngwrite.c -o $(OUTPUTS_DIR)/pngwrite.o

pngwtran.o: src/pngwtran.c
	$(CC) $(CFLAGS) -c src/pngwtran.c -o $(OUTPUTS_DIR)/pngwtran.o

pngwutil.o: src/pngwutil.c
	$(CC) $(CFLAGS) -c src/pngwutil.c -o $(OUTPUTS_DIR)/pngwutil.o

clean: 
	$(RM) -rf $(OUTPUTS_DIR)